pipeline {
 agent any|none|{ lable 'my-defined-lable }|{ node { label 'labelName' } }|{ docker 'maven:3-alpine' }|{ dockerfile true }

node - Allows for additional options (such as customWorkspace).
customWorkspace - A string. Run the Pipeline or individual stage this agent is applied to within this custom workspace, rather than the default. It can be either a relative path, in which case the custom workspace will be under the workspace root on the node, or an absolute path.
	agent {
	    node {
	        label 'my-defined-label'
	        customWorkspace '/some/other/path'
	    }
	}
docker - Execute the Pipeline, or stage, with the given container which will be dynamically provisioned on a node pre-configured to accept Docker-based Pipelines, or on a node matching the optionally defined label parameter. docker also optionally accepts an args parameter which may contain arguments to pass directly to a docker run invocation.
	agent {
	    docker {
	        image 'maven:3-alpine'
	        label 'my-defined-label'
	        args  '-v /tmp:/tmp'
    }
}
dockerfile - Execute the Pipeline, or stage, with a container built from a Dockerfile contained in the source repository. In order to use this option, the Jenkinsfile must be loaded from either a Multibranch Pipeline, or a "Pipeline from SCM." Conventionally this is the Dockerfile in the root of the source repository: agent { dockerfile true }. If building a Dockerfile in another directory, use the dir option: agent { dockerfile { dir 'someSubDir' } }. If your Dockerfile has another name, you can specify the file name with the filename option. You can pass additional arguments to the docker build …​ command with the additionalBuildArgs option, like agent { dockerfile { additionalBuildArgs '--build-arg foo=bar' } }.
	agent {
    	// Equivalent to "docker build -f Dockerfile.build --build-arg version=1.0.2 ./build/
   	 dockerfile {
        	filename 'Dockerfile.build'
        	dir 'build'
        	label 'my-defined-label'
        	additionalBuildArgs  '--build-arg version=1.0.2'
        	args '-v /tmp:/tmp'
    		}
	}
 stages{
  stage('Build'){
   steps{
    sh 'mvn -B clean verify'
   }
  }
 }
}
